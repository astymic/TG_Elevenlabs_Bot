import asyncio
import traceback
from pathlib import Path

import aiofiles
import httpx
# –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç BaseMiddleware
from aiogram import Bot, Dispatcher, F, types, BaseMiddleware
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, Audio, Voice, Document, ReplyParameters
from loguru import logger

import config
import db

# --- Setup ---
logger.add(config.LOGS_PATH / "bot.log", rotation="10 MB", compression="zip", level="INFO")
config.setup_directories()

if config.API_SERVER_URL:
    session = AiohttpSession(api=Bot(token=config.BOT_TOKEN, server=config.API_SERVER_URL).session.api)
    bot = Bot(token=config.BOT_TOKEN, session=session)
else:
    bot = Bot(token=config.BOT_TOKEN)

dp = Dispatcher()

# --- –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ---
MSG_ASK_PASSWORD = "üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É."
MSG_WELCOME = """–Ø –≥–æ–ª–æ—Å–æ–≤–æ–π –±–æ—Ç, –ø—Ä–µ–æ–±—Ä–∞–∑—É—é—â–∏–π –≤–∞—à –≥–æ–ª–æ—Å —Å –ø–æ–º–æ—â—å—é ElevenLabs Speech-to-Speech API.

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª (—Ñ–æ—Ä–º–∞—Ç—ã: mp3, wav, ogg –∏ –¥—Ä., —Ä–∞–∑–º–µ—Ä –¥–æ 50 MB).
–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤."""
MSG_SERVER_ERROR = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ."

# --- Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ---
# –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –ó–∞–º–µ–Ω–µ–Ω –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
class AuthMiddleware(BaseMiddleware):
    async def __call__(self, handler, event: types.Update, data: dict):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not event.message:
            return await handler(event, data)
        
        message = event.message

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if message.text:
            if message.text.startswith(('/start', '/logout')) or message.text == config.BOT_PASSWORD:
                return await handler(event, data)

        if not db.is_user_authorized(message.from_user.id):
            await message.answer(MSG_ASK_PASSWORD)
            return

        return await handler(event, data)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –ø–∞—Ä–æ–ª—è ---
@dp.message(CommandStart())
async def handle_start(message: Message):
    if db.is_user_authorized(message.from_user.id):
        await message.answer(MSG_WELCOME)
    else:
        await message.answer(MSG_ASK_PASSWORD)

@dp.message(Command("logout"))
async def handle_logout(message: Message):
    db.remove_user(message.from_user.id)
    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ —Å–Ω–æ–≤–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å.")
    logger.info(f"User {message.from_user.id} logged out.")

@dp.message(F.text == config.BOT_PASSWORD)
async def handle_password(message: Message):
    if not db.is_user_authorized(message.from_user.id):
        db.add_user(message.from_user.id)
        logger.info(f"New user authorized: {message.from_user.id}")
        await message.answer("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π! –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.")
        await message.answer(MSG_WELCOME)
    else:
        await message.answer("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ ---
@dp.message(F.audio | F.voice | F.document)
async def handle_audio(message: Message):
    file_to_process = message.audio or message.voice or (message.document if message.document.mime_type and "audio" in message.document.mime_type else None)
    if not file_to_process:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª (–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å –∞—É–¥–∏–æ).")
        return

    status_msg = await message.reply("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞...", disable_notification=True)

    try:
        # 1. Check file size
        if file_to_process.file_size > config.ELEVEN_FILE_SIZE_LIMIT:
            error_text = f"–û—à–∏–±–∫–∞: –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_to_process.file_size / 1e6:.2f} MB). –õ–∏–º–∏—Ç ‚Äî 50 MB."
            await status_msg.edit_text(error_text)
            logger.warning(f"User {message.from_user.id} sent a file larger than the limit.")
            return

        # 2. Download the file to the server
        await status_msg.edit_text("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")
        filename = getattr(file_to_process, 'file_name', 'audio.ogg')
        original_path = config.STORAGE_PATH / f"{file_to_process.file_unique_id}_{filename}"
        await bot.download(file_to_process, destination=original_path)

        # 3. Send to ElevenLabs
        await status_msg.edit_text("–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ ElevenLabs...")
        
        api_params = {
            "output_format": "pcm_48000"
        }
        
        async with httpx.AsyncClient(timeout=300.0) as client:
            with open(original_path, "rb") as f_audio:
                response = await client.post(
                    config.ELEVEN_API_URL, 
                    headers={"xi-api-key": config.ELEVEN_API_KEY}, 
                    files={"audio": f_audio},
                    data=api_params
                )
        
        # 4. Process the response
        await status_msg.edit_text("–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞...")
        if response.status_code != 200:
            error_details = response.json().get("detail", {}).get("message", response.text)
            await status_msg.edit_text(f"–û—à–∏–±–∫–∞ –æ—Ç ElevenLabs: {error_details}")
            logger.error(f"ElevenLabs API error: {response.status_code} - {response.text}")
            return
            
        await status_msg.edit_text("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
        
        # 5. Save and rename the result
        p = Path(original_path.name)
        
        base_name = p.stem.replace(f"{file_to_process.file_unique_id}_", "")
        new_filename = f"{base_name}_voice_changed.wav"
        processed_path = config.STORAGE_PATH / new_filename
        
        async with aiofiles.open(processed_path, 'wb') as f:
            await f.write(response.content)

        # 6. Send the result to the user
        await status_msg.edit_text("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
        
        await message.answer_document(
            types.FSInputFile(processed_path, filename=new_filename),
            reply_parameters=ReplyParameters(message_id=message.message_id)
        )
        
        await status_msg.edit_text("–ì–æ—Ç–æ–≤–æ: –≥–æ–ª–æ—Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω.")
        logger.info(f"Successfully processed file for user {message.from_user.id}: {original_path.name}")

    except Exception as e:
        logger.error(f"An error occurred for user {message.from_user.id}:\n{traceback.format_exc()}")
        await status_msg.edit_text(MSG_SERVER_ERROR)
        # Send the full traceback to the developer
        await bot.send_message(
            config.DEV_TG_ID,
            f"‚ùóÔ∏è **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ**\n\n"
            f"**User:** `{message.from_user.id}`\n"
            f"**Traceback:**\n```\n{traceback.format_exc()}\n```",
            parse_mode="Markdown"
        )
    # Files are not deleted immediately; they will be removed after 24 hours by cleanup.py

async def main():
    db.init_db()
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware –¥–ª—è –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    dp.update.middleware(AuthMiddleware())
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

if __name__ == "__main__":
    logger.info("Bot is starting...")
    asyncio.run(main())